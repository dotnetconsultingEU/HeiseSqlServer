// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnetconsulting.Samples.EFContext;

namespace dotnetconsulting.Samples.EFContext.Migrations
{
    [DbContext(typeof(SamplesContext1))]
    [Migration("20180624110721_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dnc")
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("dotnetconsulting.Samples.Domains.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasColumnName("ContentDescription")
                        .HasMaxLength(300);

                    b.Property<DateTime>("Begin");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("Difficulty");

                    b.Property<int>("Duration");

                    b.Property<DateTime>("End");

                    b.Property<int?>("EventId");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("SpeakerId");

                    b.Property<int>("TechEventId");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("Updated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("TechEventId");

                    b.HasIndex("Title");

                    b.HasIndex("Created", "Updated")
                        .IsUnique()
                        .HasFilter("[Updated] IS NOT NULL");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("dotnetconsulting.Samples.Domains.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Homepage");

                    b.Property<string>("Infos")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("(Keine Infos)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("dotnetconsulting.Samples.Domains.SpeakerSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("SessionId");

                    b.Property<int>("SpeakerId");

                    b.Property<string>("Tag");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SpeakerSessions");
                });

            modelBuilder.Entity("dotnetconsulting.Samples.Domains.TechEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Begin");

                    b.Property<string>("Code")
                        .HasColumnName("SecretCode");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("End");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("Venue");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.ToTable("TechEvents");
                });

            modelBuilder.Entity("dotnetconsulting.Samples.Domains.VenueSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("TechEventId");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("TechEventId")
                        .IsUnique()
                        .HasFilter("[TechEventId] IS NOT NULL");

                    b.ToTable("VenueSetup");
                });

            modelBuilder.Entity("dotnetconsulting.Samples.Domains.Session", b =>
                {
                    b.HasOne("dotnetconsulting.Samples.Domains.TechEvent", "TechEvent")
                        .WithMany("Sessions")
                        .HasForeignKey("TechEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetconsulting.Samples.Domains.SpeakerSession", b =>
                {
                    b.HasOne("dotnetconsulting.Samples.Domains.Session", "Session")
                        .WithMany("SpeakerSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnetconsulting.Samples.Domains.Speaker", "Speaker")
                        .WithMany("SpeakerSessions")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnetconsulting.Samples.Domains.VenueSetup", b =>
                {
                    b.HasOne("dotnetconsulting.Samples.Domains.TechEvent", "TechEvent")
                        .WithOne("VenueSetup")
                        .HasForeignKey("dotnetconsulting.Samples.Domains.VenueSetup", "TechEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
